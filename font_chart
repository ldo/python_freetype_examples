#!/usr/bin/python3
#+
# Example use of python_freetype: print a chart of all glyphs,
# and corresponding character codes, encoded by a specified font.
# Invoke this script as follows:
#
#     font_chart «fontspec» «outfile»
#
# where «fontspec» is the Fontconfig pattern string identifying the
# font to use, and «outfile» is the name to give to the output file
# containing the generated chart. The output can be PNG or SVG, with
# the whole chart on one page, or it can be PDF or PostScript, with
# each Unicode block on a separate page.
#
# Also requires Qahirah <https://gitlab.com/ldo/qahirah>,
# <https://bitbucket.org/ldo17/qahirah>.
#
# This program can also be given a .zip file, in which case it will
# temporarily extract it and generate a chart for each font file
# found within. External program needed for this: unar.
#
# Copyright 2015-2020 by Lawrence D'Oliveiro <ldo@geek-central.gen.nz>. This
# script is licensed CC0
# <https://creativecommons.org/publicdomain/zero/1.0/>; do with it
# what you will.
#-

import sys
import os
import math
import tempfile
import subprocess
import shutil
import getopt
import qahirah as qah
from qahirah import \
    CAIRO, \
    Colour, \
    Matrix, \
    Vector
import freetype2 as freetype
FT = freetype.FT
ft = qah.get_ft_lib() # might as well use same one

from code_blocks import \
    CodeBlock, \
    code_blocks

#+
# Useful stuff
#-

def ensure_reasonable_umask() :
    "ensures that the umask is set to a reasonable value, namely" \
    " that user always has read+write+execute access to files that" \
    " they create, while leaving the group- and other-access bits" \
    " unchanged. Returns the previous and new umask values, for" \
    " reference."
    ensure_clear_in_umask = 0o700
    oldmask = os.umask(0o077)
      # temporarily set to some safe value
    newmask = oldmask & ~ensure_clear_in_umask
    os.umask(newmask)
    return oldmask, newmask
#end ensure_reasonable_umask

def make_image_surface(from_bitmap) :
    "copies the contents of a freetype2.Bitmap object into an array and creates and" \
    " returns a qahirah.ImageSurface object wrapping it."
    if from_bitmap.pixel_mode == FT.PIXEL_MODE_MONO :
        cairo_format = CAIRO.FORMAT_A1
    elif from_bitmap.pixel_mode == FT.PIXEL_MODE_GRAY :
        cairo_format = CAIRO.FORMAT_A8
    else :
        raise NotImplementedError("unsupported bitmap format %d" % from_bitmap.pixel_mode)
    #end if
    stride = qah.ImageSurface.format_stride_for_width(cairo_format, from_bitmap.width)
    buf = from_bitmap.to_array(stride)
    return \
        qah.ImageSurface.create_for_array \
          (
            arr = buf,
            format = cairo_format,
            dimensions = (from_bitmap.width, from_bitmap.rows),
            stride = stride
          )
#end make_image_surface

fontfile_extensions = (".otf", ".ttf")

#+
# Mainline
#-

ensure_reasonable_umask()
margin = Vector(10, 10)
textsize = 48 # default
nr_cols = 32
show_glyph_codes = False
opts, args = getopt.getopt \
  (
    sys.argv[1:],
    "",
    ["cols=", "glyph-codes", "size="]
  )
for keyword, value in opts :
    if keyword == "--cols" :
        nr_cols = int(value)
    elif keyword == "--glyph-codes" :
        show_glyph_codes = True
    elif keyword == "--size" :
        textsize = float(value)
    #end if
#end for
if len(args) != 2 :
    raise getopt.GetoptError("need two args, the Fontconfig pattern string and the output filename")
#end if
patternstr, outfilename = args

if outfilename.endswith(".png") :
    multipage = False
    SurfaceClass = None
elif outfilename.endswith(".svg") :
    multipage = False
    SurfaceClass = qah.SVGSurface
    # actually not a lot of point to this, since Cairo saves the entire
    # page as a single bitmap
elif outfilename.endswith(".pdf") :
    multipage = True
    SurfaceClass = qah.PDFSurface
elif outfilename.endswith(".ps") :
    multipage = True
    SurfaceClass = qah.PSSurface
else :
    raise getopt.GetoptError("output filename must end in .png, .pdf, .ps or .svg")
#end if

# get layout parameters for labels
label_font_name = "serif" # something acceptable to toy font face API only for now
title_size = textsize
label_large_size = textsize * 0.7
if show_glyph_codes :
    label_small_size = textsize / 6
else :
    label_small_size = textsize / 4
#end if
g = qah.Context.create_for_dummy()
g.select_font_face(label_font_name, CAIRO.FONT_SLANT_NORMAL, CAIRO.FONT_WEIGHT_NORMAL)
g.set_font_size(title_size)
max_title_ascender = g.font_extents.ascent
max_title_descender = g.font_extents.descent
g.set_font_size(label_large_size)
max_label_large_ascender = g.font_extents.ascent
max_label_large_descender = g.font_extents.descent
g.set_font_size(label_small_size)
max_label_small_ascender = g.font_extents.ascent
max_label_small_descender = g.font_extents.descent
max_label_width = g.text_extents("U+00000").x_advance * (1, 2.5)[show_glyph_codes]
# sys.stderr.write("show ascender = %.3f, descender = %.3f, height = %.3f, max_advance = %.3f\n" % (max_show_ascender, max_show_descender, show_face.size["metrics"]["height"], max_show_advance)) # debug

def make_chart(patternstr, isfontfile, outfilename) :
    if isfontfile or patternstr.find("/") >= 0 or patternstr.endswith(fontfile_extensions) :
        # interpret as filename
        show_face = ft.new_face(patternstr)
    else :
        show_face = ft.find_face(patternstr)
    #end if
    sys.stderr.write("show font family %s style %s filename %s\n" % (show_face.family_name, show_face.style_name, show_face.filename)) # debug
    if len(show_face.available_sizes) != 0 :
        # fixme: quick hack for bitmap fonts
        sys.stderr.write("available_sizes = %s\n" % repr(show_face.available_sizes)) # debug
        use_size = show_face.available_sizes[0]
        show_face.set_pixel_sizes(use_size["x_ppem"], use_size["y_ppem"])
    else :
        show_face.set_char_size(size = textsize, resolution = freetype.base_dpi)
    #end if
    max_show_ascender = show_face.size["metrics"]["ascender"]
    max_show_descender = - show_face.size["metrics"]["descender"]
    max_show_advance = max(show_face.size["metrics"]["max_advance"], max_label_width)

    nr_blocks = 0
    nr_rows = 0
    show_char_blocks = []
    unmapped_glyphs = set(range(1, show_face.num_glyphs)) # always ignore glyph 0
    last_end = 0
    for code_block in code_blocks :
        if code_block.lo > last_end :
            check_blocks = \
                [
                    CodeBlock
                      (
                        "Unassigned U+%X..U+%X" % (last_end, code_block.lo - 1),
                        last_end,
                        code_block.lo - 1
                      ),
                    code_block
                ]
              # make up an additional code block for the gap
        else :
            check_blocks = [code_block]
        #end if
        last_end = code_block.end
        for block in check_blocks :
            show_rows = set \
              (
                math.floor(c / nr_cols)
                for c in filter
                  (
                    lambda c : show_face.get_char_index(c) != 0, block.range
                  )
              )
              # set of row numbers having something to show on them
            unmapped_glyphs -= set(show_face.get_char_index(c) for c in block.range)
            if len(show_rows) != 0 :
                nr_blocks += 1
                show_block = \
                    {
                        "name" : block.name,
                        "rows" : sorted(show_rows),
                        "lo" : block.lo,
                        "end" : block.end,
                    }
                nr_rows += len(show_rows)
                show_char_blocks.append(show_block)
            #end if
        #end for
    #end for
    show_glyph_rows = list(sorted(set(math.floor(c / nr_cols) for c in unmapped_glyphs)))
    if len(show_glyph_rows) != 0 :
        nr_rows += len(show_glyph_rows)
        nr_blocks += 1
    #end if

    chart_width = nr_cols * max_show_advance
    chart_title_height = max_title_ascender + max_title_descender
    chart_block_title_height = max_label_large_ascender + max_label_large_descender
    chart_row_height = \
        max_show_ascender + max_show_descender + max_label_small_ascender + max_label_small_descender

    if multipage :
        pix = SurfaceClass.create(outfilename, (0, 0))
    else :
        pix_dimensions = \
            round \
              (
                    Vector
                      (
                        x = chart_width,
                        y =
                                chart_title_height
                            +
                                nr_blocks * chart_block_title_height
                            +
                                nr_rows * chart_row_height
                      )
                +
                    2 * margin
              )
        sys.stderr.write("creating image w×h = %d×%d\n" % (pix_dimensions.x, pix_dimensions.y)) # debug
        if SurfaceClass != None :
            pix = SurfaceClass.create(outfilename, pix_dimensions)
        else :
            pix = qah.ImageSurface.create \
              (
                format = CAIRO.FORMAT_RGB24,
                dimensions = pix_dimensions
              )
        #end if
    #end if

    done_title = False
    g = y = None

    def show_title(title) :
        # draws text horizontally-centred at the current y-position.
        # If it is too wide, it will be squashed to fit the chart width.
        title_width = g.text_extents(title).x_advance
        if title_width > chart_width :
            # squash to fit
            g.font_matrix *= Matrix.scale(Vector(chart_width / title_width, 1.0))
        #end if
        g.move_to \
          ((
            (chart_width - g.text_extents(title)[2]) / 2, # horizontally centred
            g.current_point.y
          ))
        g.show_text(title)
    #end show_title

    def begin_page(block) :
        nonlocal done_title, g, y
        if not done_title :
            g = qah.Context.create(pix)
            g.translate(margin)
        #end if
        if multipage :
            pix.set_size \
              (
                    Vector
                      (
                        x = chart_width,
                        y =
                                chart_title_height
                            +
                                chart_block_title_height
                            +
                                len(block["rows"]) * chart_row_height
                      )
                +
                    2 * margin
               )
        #end if
        if multipage or not done_title :
            g.source_colour = Colour.grey(1)
            g.operator = CAIRO.OPERATOR_SOURCE
            g.paint()
            g.source_colour = Colour.grey(0)
            g.select_font_face(label_font_name, CAIRO.FONT_SLANT_NORMAL, CAIRO.FONT_WEIGHT_NORMAL)
            g.set_font_size(title_size)
            g.move_to((0, max_title_ascender))
            show_title("%s %s" % (show_face.family_name, show_face.style_name))
            y = max_title_ascender + max_title_descender
        #end if
        done_title = True
    #end begin_page

    def end_page() :
        if multipage :
            pix.show_page()
        #end if
    #end end_page

    for block in show_char_blocks :
        begin_page(block)
        y += max_label_large_ascender
        g.set_font_size(label_large_size)
        g.move_to((0, y))
        show_title(block["name"])
        y += max_label_large_descender
        g.set_font_size(label_small_size)
        for row in block["rows"] :
            y += max_show_ascender
            x = 0
            for code in range(row * nr_cols, (row + 1) * nr_cols) :
                if code >= block["lo"] and code < block["end"] : # row might span more than one block
                    glyph_code = show_face.get_char_index(code)
                else :
                    glyph_code = 0
                #end if
                if glyph_code != 0 :
                    try :
                        show_face.load_glyph(glyph_code, FT.LOAD_DEFAULT)
                    except freetype.FTException as bad :
                        sys.stderr.write("bad glyph code %d for char U+%04X: %s\n" % (glyph_code, code, str(bad)))
                    #end try
                    if show_face.glyph.metrics["height"] != 0 : # will be 0 for empty glyph (e.g. space character)
                        show_face.glyph.render_glyph(FT.RENDER_MODE_NORMAL)
                        img = make_image_surface(show_face.glyph.bitmap)
                        g.mask_surface \
                          (
                            surface = img,
                            origin =
                              (
                                x + (max_show_advance - img.width) / 2,
                                y - show_face.glyph.metrics["horiBearingY"]
                              )
                          )
                    #end if
                    label = "U+%0.4X" % code
                    if show_glyph_codes :
                        label += " => %#0.4x" % glyph_code
                    #end if
                    g.move_to \
                      ((
                        x + (max_show_advance - g.text_extents(label)[2]) / 2,
                        y + max_show_descender + max_label_small_ascender
                      ))
                    g.show_text(label)
                #end if
                x += max_show_advance
            #end for
            y += max_show_descender + max_label_small_ascender + max_label_small_descender
        #end for
        end_page()
    #end for

    if len(show_glyph_rows) != 0 :
        begin_page({"rows" : show_glyph_rows})
        block_name = "Unmapped Glyphs"
        y += max_label_large_ascender
        g.set_font_size(label_large_size)
        g.move_to \
          ((
            (chart_width - g.text_extents(block_name)[2]) / 2, # horizontally centred
            y
          ))
        g.show_text(block_name)
        y += max_label_large_descender
        g.set_font_size(label_small_size)
        for row in show_glyph_rows :
            y += max_show_ascender
            x = 0
            for glyph_code in range(row * nr_cols, (row + 1) * nr_cols) :
                if glyph_code in unmapped_glyphs :
                    try :
                        show_face.load_glyph(glyph_code, FT.LOAD_DEFAULT)
                    except freetype.FTException as bad :
                        sys.stderr.write("bad glyph code %d: %s\n" % (glyph_code, str(bad)))
                    #end try
                    if show_face.glyph.metrics["height"] != 0 : # will be 0 for empty glyph (e.g. space character)
                        show_face.glyph.render_glyph(FT.RENDER_MODE_NORMAL)
                        img = make_image_surface(show_face.glyph.bitmap)
                        g.mask_surface \
                          (
                            surface = img,
                            origin =
                              (
                                x + (max_show_advance - img.width) / 2,
                                y - show_face.glyph.metrics["horiBearingY"]
                              )
                          )
                    #end if
                    label = "%#x" % glyph_code
                    g.move_to \
                      ((
                        x + (max_show_advance - g.text_extents(label)[2]) / 2,
                        y + max_show_descender + max_label_small_ascender
                      ))
                    g.show_text(label)
                #end if
                x += max_show_advance
            #end for
            y += max_show_descender + max_label_small_ascender + max_label_small_descender
        #end for
        end_page()
    #end if

    pix.flush()
    if SurfaceClass != None :
        g = pix = None # no explicit flush call!
    else :
        sys.stderr.write("saving to %s..." % outfilename)
        sys.stderr.flush()
        pix.write_to_png(outfilename)
    #end if
    sys.stderr.write("done %s => %s\n" % (patternstr, outfilename))
#end make_chart

if patternstr.endswith(".zip") :
    temp_dir = tempfile.mkdtemp(prefix = "font_chart-")
    try :
        subprocess.check_call \
          (
            args = ("unar", "-q", "-D", os.path.abspath(patternstr)),
              # interesting that “-qD” isn’t accepted...
            cwd = temp_dir
          )
        outbasename, outext = os.path.splitext(outfilename)

        def scan_dir(parent) :
            for item in os.listdir(parent) :
                child = os.path.join(parent, item)
                if item.endswith(fontfile_extensions) :
                    make_chart \
                      (
                        patternstr = child,
                        isfontfile = True,
                        outfilename =
                                "%s%s%s%s"
                            %
                                (outbasename, ("", "-")[outbasename != ""], os.path.splitext(item)[0], outext)
                      )
                elif os.path.isdir(child) :
                    scan_dir(child)
                else :
                    sys.stderr.write("ignore archive member “%s”\n" % item)
                #end if
            #end for
        #end scan_dir

        scan_dir(temp_dir)
    finally :
        try :
            shutil.rmtree(temp_dir)
        except OSError :
            pass
        #end try
    #end try
else :
    make_chart(patternstr, False, outfilename)
#end if
