#!/usr/bin/python3
#+
# Example use of python_freetype: demonstration of Multiple Masters
# functionality. Invoke this script as follows:
#
#     mm_demo <font_file> <text>
#
# where <font_file> is the name of a font with Multiple Masters
# capability, and <text> is the sample text to display.
#
# Also requires Qahirah <https://gitlab.com/ldo/qahirah>, <https://bitbucket.org/ldo17/qahirah>.
#
# Copyright 2015 by Lawrence D'Oliveiro <ldo@geek-central.gen.nz>. This
# script is licensed CC0
# <https://creativecommons.org/publicdomain/zero/1.0/>; do with it
# what you will.
#-

import sys
import os
import getopt
import qahirah as qah
from qahirah import \
    CAIRO, \
    Colour, \
    Vector
import freetype2
ftl = qah.get_ft_lib()

def iter_axis_ranges(mm_info, nrdivs) :
    "iterates over all combinations of coordinate axis value ranges."

    def iter_from_axis(dim) :
        # iterates over the specified axis and recursively over all following ones.
        if dim < mm_info["num_axis"] :
            axis = mm_info["axis"][dim]
            for val in \
                qah.distribute \
                  (
                    nrdivs = nrdivs,
                    p1 = axis["minimum"],
                    p2 = axis["maximum"],
                    endincl = True
                  ) \
            :
                for rest in iter_from_axis(dim + 1) :
                    yield (round(val),) + rest
                #end for
            #end for
        else :
            yield ()
        #end if
    #end iter_from_axis

#begin iter_axis_ranges
    return \
        iter_from_axis(0)
#end iter_axis_ranges

#+
# Mainline
#-

nrdivs = 2
text_size = 72
label_font_name = "serif" # something bland and safe
opts, args = getopt.getopt \
  (
    sys.argv[1:],
    "",
    ["nrdivs=", "size="]
  )
for keyword, value in opts :
    if keyword == "--nrdivs" :
        nrdivs = int(value)
        assert nrdivs > 0
    elif keyword == "--size" :
        text_size = float(value)
        assert text_size > 0
    #end if
#end for
if len(args) != 2 :
    raise getopt.GetoptError("need two args, the name of the font file and the text to render")
#end if

fontfile = args[0]
show_text = args[1]
mm_font = ftl.new_face(fontfile)
mm_info = mm_font.multi_master
sys.stderr.write("{}: {}\n".format(mm_font.family_name, mm_info)) # debug
if mm_info == None :
    raise getopt.GetoptError("{} is not a Multiple Master font".format(mm_font.family_name))
#end if
mm_font.set_char_size(size = text_size, resolution = freetype2.base_dpi)
font_metrics = mm_font.size["metrics"]
label_size = text_size / 3
label_font = \
    (qah.Context.create_for_dummy()
        .select_font_face(label_font_name, CAIRO.FONT_SLANT_NORMAL, CAIRO.FONT_WEIGHT_NORMAL)
        .set_font_size(label_size)
        .scaled_font
    )

margin = Vector(10, 10)
text_dims = \
    Vector \
      (
        x = font_metrics["max_advance"] * len(show_text), # hopefully should always be plenty
        y = font_metrics["ascender"] - font_metrics["descender"]
      )
text_y = (font_metrics["ascender"] + font_metrics["descender"]) / 2
sys.stderr.write("ascender = {}, descender = {}, text_y = {}\n".format(font_metrics["ascender"], font_metrics["descender"], text_y)) # debug
nr_instances = round((nrdivs + 1) ** mm_info["num_axis"])
sys.stderr.write("nr_instances = {} ** {} = {}\n".format(nrdivs + 1, mm_info["num_axis"], nr_instances)) # debug
rendering = False
max_width = 0
max_height = 0
ctx = qah.Context.create_for_dummy()
while True :
    pos = margin
    for coords in iter_axis_ranges(mm_info, nrdivs) :
        descrip = ", ".join \
          (
            "{}: {}".format(elt[0]["name"], elt[1])
                for elt in zip(mm_info["axis"][:mm_info["num_axis"]], coords)
          )
        ctx.move_to(pos + Vector(0, font_metrics["ascender"]))
        ctx.scaled_font = label_font
        ctx.show_text("{} {}".format(mm_font.family_name, descrip))
        ctx.rel_move_to((10, 0))
        mm_font = ftl.new_face(fontfile)
          # need to load a new copy to defeat Cairo caching
        mm_font.set_mm_design_coordinates(coords)
        ctx.font_face = qah.FontFace.create_for_ft_face(mm_font)
        ctx.set_font_size(text_size)
        ctx.show_text(show_text)
        pos += (margin + text_dims) * Vector(0, 1)
        if not rendering :
            max_width = max(max_width, ctx.current_point.x)
        #end if
    #end for
    if rendering :
        break
    max_height = pos.y
    pix = qah.ImageSurface.create \
      (
        format = CAIRO.FORMAT_RGB24,
        dimensions = round(Vector(max_width, max_height) + margin)
      )
    ctx = \
        (qah.Context.create(pix)
            .set_source_colour(Colour.grey(1))
            .paint()
            .set_source_colour(Colour.grey(0))
        )
    rendering = True
#end while

pix.flush().write_to_png("{}.png".format(os.path.basename(sys.argv[0])))
