#!/usr/bin/python3
#+
# Example use of my Python FreeType binding: render a text string to a PNG file.
# Invoke this script as follows:
#
#     render_text <text> <fontspec> <textsize> <outfile>
#
# where <text> is the text string to render, <fontspec> is a Fontconfig
# pattern string identifying the font to use, <textsize> is the numeric
# text size at which to render the text, and <outfile> is the name of
# the output PNG file to which to save the result.
#
# This script does very simplistic rendering, without catering for
# bidirectional ordering or contextual forms.
#
# Also requires Qahirah <https://gitlab.com/ldo/qahirah>, <https://bitbucket.org/ldo17/qahirah>.
#
# Copyright 2015, 2018 by Lawrence D'Oliveiro
# <ldo@geek-central.gen.nz>. This script is licensed CC0
# <https://creativecommons.org/publicdomain/zero/1.0/>; do with it
# what you will.
#-

import sys
import getopt
import qahirah as qah
from qahirah import \
    CAIRO, \
    Colour, \
    Glyph
import freetype2
FT = freetype2.FT

do_kerning = True
opts, args = getopt.getopt \
  (
    sys.argv[1:],
    "",
    ["nokern"]
  )
for keyword, value in opts :
    if keyword == "--nokern" :
        do_kerning = False
    #end if
#end for
if len(args) != 4 :
    raise getopt.GetoptError("usage: %s <text> <fontspec> <textsize> <outfile>" % sys.argv[0])
#end if
text, fontspec, textsize, outfile = args
textsize = float(textsize)

face = qah.get_ft_lib().find_face(fontspec)
sys.stderr.write("Using font %s %s from %s\n" % (face.family_name, face.style_name, face.filename))
face.set_char_size(size = textsize, resolution = qah.base_dpi)
width = 0
max_ascender = 0
max_descender = 0
prev_glyph = None
glyphs = []
for ch in text :
    glyph_index = face.get_char_index(ord(ch))
    face.load_glyph(glyph_index, FT.LOAD_DEFAULT)
    if do_kerning and prev_glyph != None :
        kern = face.get_kerning(prev_glyph, glyph_index, FT.KERNING_DEFAULT).x
    else :
        kern = 0
    #end if
    width += kern
    hori_advance = face.glyph.metrics["horiAdvance"]
    glyphs.append(Glyph(glyph_index, (width, 0)))
    width += hori_advance
    max_ascender = max(max_ascender, face.glyph.metrics["horiBearingY"])
    max_descender = max(max_descender, face.glyph.metrics["height"] - face.glyph.metrics["horiBearingY"])
    sys.stderr.write("char %d w×h = %g×%g ascender %g bearingx %g kern %g\n" % (ord(ch), face.glyph.metrics["horiAdvance"], face.glyph.metrics["height"], face.glyph.metrics["horiBearingY"], face.glyph.metrics["horiBearingX"], kern)) # debug
    prev_glyph = glyph_index
#end for
height = max_ascender + max_descender
sys.stderr.write("bitmap dimensions w×h = %g×%g\n" % (width, height)) # debug
sys.stderr.write("glyphs = %s\n" % repr(glyphs)) # debug

pix = qah.ImageSurface.create(CAIRO.FORMAT_RGB24, (round(width), round(height)))
(qah.Context.create(pix)
    .set_source_colour(Colour.grey(1))
    .set_operator(CAIRO.OPERATOR_SOURCE)
    .paint()
    .set_source_colour(Colour.grey(0))
    .set_font_face(qah.FontFace.create_for_ft_face(face))
    .set_font_size(textsize)
    .translate((0, max_ascender))
    .show_glyphs(glyphs)
)
pix.flush().write_to_png(outfile)
sys.stderr.write("image written to %s\n" % outfile) # debug
